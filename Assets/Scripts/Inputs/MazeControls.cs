//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Inputs/MazeControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MazeControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MazeControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MazeControls"",
    ""maps"": [
        {
            ""name"": ""MazeMap"",
            ""id"": ""2f928353-a72d-43e7-9028-b3b6ffea861b"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""d4c87893-43a7-4f71-9a8f-ba8ca3b7b25d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""684651c8-871d-451c-89fb-1ef7994620b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""91b0964c-b5f4-4095-8e12-d0052aab75d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""73713208-5c1d-4c72-a5cf-f11ac48dd221"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""974ca761-fd27-47e7-b8a0-8537f3ca1ab9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41217a55-c0df-484a-8088-f763834a1629"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db0d935e-2f31-4016-85aa-e10ab8fbd4ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09c7576d-ce7c-4f7a-bbb9-3f5603360be9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e6ffd1b-51fe-4649-912f-6d359dfedfa5"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MazeScheme"",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb476759-81eb-4631-9179-e9e5663b4d90"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MazeScheme"",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""6d02a7d5-cfba-4b8b-9308-793799b5b318"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""01a1f2ac-9e75-47e8-8cfa-8dd55e93790b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af5f4b58-77bf-4155-bcae-e03bdcabf6f6"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MazeScheme"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MazeScheme"",
            ""bindingGroup"": ""MazeScheme"",
            ""devices"": []
        }
    ]
}");
        // MazeMap
        m_MazeMap = asset.FindActionMap("MazeMap", throwIfNotFound: true);
        m_MazeMap_Movements = m_MazeMap.FindAction("Movements", throwIfNotFound: true);
        m_MazeMap_PrimaryContact = m_MazeMap.FindAction("PrimaryContact", throwIfNotFound: true);
        m_MazeMap_PrimaryPosition = m_MazeMap.FindAction("PrimaryPosition", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Start = m_UI.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MazeMap
    private readonly InputActionMap m_MazeMap;
    private IMazeMapActions m_MazeMapActionsCallbackInterface;
    private readonly InputAction m_MazeMap_Movements;
    private readonly InputAction m_MazeMap_PrimaryContact;
    private readonly InputAction m_MazeMap_PrimaryPosition;
    public struct MazeMapActions
    {
        private @MazeControls m_Wrapper;
        public MazeMapActions(@MazeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_MazeMap_Movements;
        public InputAction @PrimaryContact => m_Wrapper.m_MazeMap_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_MazeMap_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_MazeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MazeMapActions set) { return set.Get(); }
        public void SetCallbacks(IMazeMapActions instance)
        {
            if (m_Wrapper.m_MazeMapActionsCallbackInterface != null)
            {
                @Movements.started -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnMovements;
                @Movements.performed -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnMovements;
                @Movements.canceled -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnMovements;
                @PrimaryContact.started -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_MazeMapActionsCallbackInterface.OnPrimaryPosition;
            }
            m_Wrapper.m_MazeMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            }
        }
    }
    public MazeMapActions @MazeMap => new MazeMapActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Start;
    public struct UIActions
    {
        private @MazeControls m_Wrapper;
        public UIActions(@MazeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_UI_Start;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_UIActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_MazeSchemeSchemeIndex = -1;
    public InputControlScheme MazeSchemeScheme
    {
        get
        {
            if (m_MazeSchemeSchemeIndex == -1) m_MazeSchemeSchemeIndex = asset.FindControlSchemeIndex("MazeScheme");
            return asset.controlSchemes[m_MazeSchemeSchemeIndex];
        }
    }
    public interface IMazeMapActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
}
